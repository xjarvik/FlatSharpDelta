using System;
using System.IO;
using reflection;

namespace FlatSharpDelta.Compiler
{
    static class SchemaCodeWriter
    {
        public static string WriteCode(Schema schema, FileInfo declarationFile)
        {
            string code = @"
                //------------------------------------------------------------------------------
                // <auto-generated>
                //     Code generated by FlatSharpDelta.Compiler, do not modify.
                //
                //     Compiler version: 0.0.0
                //     Source hash: abc
                // </auto-generated>
                //------------------------------------------------------------------------------

                using System;
                using System.Collections;
                using System.Collections.Generic;
                using System.Collections.ObjectModel;
                using System.Reflection;
                using FlatSharp;
                #nullable enable annotations
            ";

            foreach(reflection.Object obj in schema.objects)
            {
                if(obj.declaration_file != "//" + declarationFile.Name)
                {
                    continue;
                }

                if(!obj.is_struct || !obj.HasAttribute("fs_valueStruct"))
                {
                    code += ReferenceTypeCodeWriter.WriteCode(schema, obj);
                    code += ReferenceTypeListCodeWriter.WriteCode(schema, obj);
                }
                else
                {
                    code += ValueStructListCodeWriter.WriteCode(schema, obj);
                    code += ValueStructExtensionsCodeWriter.WriteCode(schema, obj);
                }
            }

            foreach(reflection.Enum _enum in schema.enums)
            {
                if(_enum.declaration_file != "//" + declarationFile.Name)
                {
                    continue;
                }

                if(_enum.is_union)
                {
                    code += UnionCodeWriter.WriteCode(schema, _enum);
                    code += UnionListCodeWriter.WriteCode(schema, _enum);
                    code += UnionExtensionsCodeWriter.WriteCode(schema, _enum);
                }
                else
                {
                    code += EnumListCodeWriter.WriteCode(schema, _enum);
                }
            }

            return code;
        }
    }
}